#pragma once

#include "Attribute.h"

#include <vector>

class Individual {
	// мб считывать все числовые значения в строку и этой строкой манипулировать потом. 
	// всегда ли скрещиваемые данные это какие то числовые значения?
	// ! как правило, Индивид - это сочетание (комбинация) каких то аттрибутов (набор мувов или точек, комбинация из вида действия типа Move/Rotate и его параметров типа x, y, angle)
	// значит эту комбинацию можно представить в виде массива/списка параметров
	// и с этим списком будет удобно проводить операции типа скрещивания
	// останется в классе наследующем Индивида определить функцию которая считывает набор данных в геном, и все содержащиеся данные должны быть унаследованы от Attribute 

	// Порядок аттрибутов должен быть единственным, то есть под одним и тем же индексом должны быть параметры одного и того же типа
	std::vector<Attribute*> genome;

public:
	virtual ~Individual() = 0;

	virtual void initIndividual();		// инициализирует геном из наследующего класса

	virtual void setGenome();			// инициализирует поля наследующего класса значениями аттрибутов из генома

	// у аттрибутов должен быть метод рандомайз, а здесь мы его просто вызовем для аттрибутов
	void randomize();

	void mutate();			// рандомизирует случайный параметр генома

	friend void cross(Individual* mom, Individual* dad);
};

typedef std::vector<Individual*> Generation